// webapp/js/app.js
import { drawWheel } from './wheel.js';
import { initTelegram } from './telegram.js';

// –î–∞–Ω–Ω—ã–µ –æ —Å—Ñ–µ—Ä–∞—Ö –∂–∏–∑–Ω–∏
const SPHERES_DATA = [
    {
        key: 'health',
        title: '–ó–¥–æ—Ä–æ–≤—å–µ',
        icon: 'üèÉ‚Äç‚ôÇÔ∏è',
        color: '#10B981',
        className: 'sphere-health',
        questions: [
            '–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è?',
            '–•–≤–∞—Ç–∞–µ—Ç –ª–∏ –≤–∞–º —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –¥–µ–ª?',
            '–£–¥–µ–ª—è–µ—Ç–µ –ª–∏ –≤—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–µ –∑–¥–æ—Ä–æ–≤—å—è?'
        ]
    },
    {
        key: 'career',
        title: '–ö–∞—Ä—å–µ—Ä–∞',
        icon: 'üíº',
        color: '#6366F1',
        className: 'sphere-career',
        questions: [
            '–ü—Ä–∏–æ—â—É—â–µ–Ω–∏–µ —Å–º—ã—Å–ª–∞ –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è?',
            '–í–∏–¥–∏—Ç–µ –ª–∏ –≤—ã –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞?',
            '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–∞—à–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–º —Ü–µ–ª—è–º?'
        ]
    },
    {
        key: 'finance',
        title: '–§–∏–Ω–∞–Ω—Å—ã',
        icon: 'üí∞',
        color: '#059669',
        className: 'sphere-finance',
        questions: [
            '–£—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–∏ –≤–∞—Å –≤–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞?',
            '–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å?',
            '–£–º–µ–µ—Ç–µ –ª–∏ –≤—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã?'
        ]
    },
    {
        key: 'love',
        title: '–õ—é–±–æ–≤—å',
        icon: '‚ù§Ô∏è',
        color: '#DC2626',
        className: 'sphere-love',
        questions: [
            '–ï—Å—Ç—å –ª–∏ –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏ –±–ª–∏–∑–æ—Å—Ç—å –∏ –≤–∑–∞–∏–º–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞?',
            '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω—ã –ª–∏ –≤—ã –∫–∞—á–µ—Å—Ç–≤–æ–º —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π?',
            '–î–æ–≤–æ–ª—å–Ω—ã –ª–∏ –≤—ã —É—Ä–æ–≤–Ω–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?'
        ]
    },
    {
        key: 'family',
        title: '–°–µ–º—å—è',
        icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
        color: '#EA580C',
        className: 'sphere-family',
        questions: [
            '–ù–∞—Å–∫–æ–ª—å–∫–æ –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Å–µ–º—å–µ–π?',
            '–•–≤–∞—Ç–∞–µ—Ç –ª–∏ –≤–∞–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –±–ª–∏–∑–∫–∏—Ö –ª—é–¥–µ–π?',
            '–ï—Å—Ç—å –ª–∏ –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–º—å–µ?'
        ]
    },
    {
        key: 'friends',
        title: '–î—Ä—É–∑—å—è',
        icon: 'üë•',
        color: '#2563EB',
        className: 'sphere-friends',
        questions: [
            '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –Ω–∞–¥–µ–∂–Ω—ã–µ –¥—Ä—É–∑—å—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å—Å—è?',
            '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç –ª–∏ –≤–∞—Å –≤–∞—à –∫—Ä—É–≥ –æ–±—â–µ–Ω–∏—è?',
            '–õ–µ–≥–∫–æ –ª–∏ –≤–∞–º –∑–∞–≤–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?'
        ]
    },
    {
        key: 'hobby',
        title: '–•–æ–±–±–∏',
        icon: 'üé≠',
        color: '#7C3AED',
        className: 'sphere-hobby',
        questions: [
            '–•–≤–∞—Ç–∞–µ—Ç –ª–∏ –≤–∞–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —É–≤–ª–µ—á–µ–Ω–∏—è –∏ —Ö–æ–±–±–∏?',
            '–ü–æ–ª—É—á–∞–µ—Ç–µ –ª–∏ –≤—ã —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –¥–æ—Å—É–≥–∞ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π?',
            '–£–º–µ–µ—Ç–µ –ª–∏ –≤—ã –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å –∏ —Ä–∞—Å—Å–ª–∞–±–ª—è—Ç—å—Å—è?'
        ]
    },
    {
        key: 'self',
        title: '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ',
        icon: 'üìö',
        color: '#16A34A',
        className: 'sphere-self',
        questions: [
            '–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç–µ –ª–∏ –≤—ã —É—á–∏—Ç—å—Å—è –∏ –ø–æ–∑–Ω–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ?',
            '–†–∞–±–æ—Ç–∞–µ—Ç–µ –ª–∏ –≤—ã –Ω–∞–¥ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–º —Ä–∞–∑–≤–∏—Ç–∏–µ–º?',
            '–ó–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –ª–∏ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π –∏ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–æ–º?'
        ]
    }
];

class LifeWheelApp {
    constructor() {
        this.currentSphereIndex = 0;
        this.scores = {};
        this.isCompleted = false;
        
        // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        this.progressFill = document.getElementById('progressFill');
        this.progressText = document.getElementById('progressText');
        this.sphereIcon = document.getElementById('sphereIcon');
        this.sphereTitle = document.getElementById('sphereTitle');
        this.questionsContainer = document.getElementById('questionsContainer');
        this.ratingSlider = document.getElementById('ratingSlider');
        this.ratingValue = document.getElementById('ratingValue');
        this.prevBtn = document.getElementById('prevBtn');
        this.nextBtn = document.getElementById('nextBtn');
        this.questionCard = document.getElementById('questionCard');
        this.completionScreen = document.getElementById('completionScreen');
        this.wheelCanvas = document.getElementById('wheelCanvas');
        this.finalWheelCanvas = document.getElementById('finalWheelCanvas');
        
        this.init();
    }
    
    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
        initTelegram();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
        if (!this.ratingSlider || !this.nextBtn || !this.prevBtn) {
            console.error('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ DOM —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            this.createFallbackUI();
            return;
        }
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        this.ratingSlider.addEventListener('input', (e) => {
            this.updateRatingDisplay(e.target.value);
        });
        
        this.prevBtn.addEventListener('click', () => {
            this.previousSphere();
        });
        
        this.nextBtn.addEventListener('click', () => {
            this.nextSphere();
        });
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—É—é —Å—Ñ–µ—Ä—É
        this.showSphere(0);
        this.updateWheel();
        
        console.log('Life Wheel App initialized');
    }
    
    // Fallback UI –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    createFallbackUI() {
        const app = document.getElementById('app');
        if (!app) return;
        
        app.innerHTML = `
            <div class="fallback-ui">
                <div class="sphere-header">
                    <h2 id="sphereIcon">üèÉ‚Äç‚ôÇÔ∏è</h2>
                    <h3 id="sphereTitle">–ó–¥–æ—Ä–æ–≤—å–µ</h3>
                </div>
                
                <div class="progress-bar">
                    <div id="progressFill" class="progress-fill" style="width: 12.5%"></div>
                    <span id="progressText" class="progress-text">1 / 8</span>
                </div>
                
                <div id="questionsContainer" class="questions">
                    <!-- –í–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                </div>
                
                <div class="slider-container">
                    <label for="ratingSlider">–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: <span id="ratingValue">5</span>/10</label>
                    <input type="range" min="1" max="10" value="5" id="ratingSlider" class="slider" />
                    <div class="slider-labels"><span>1</span><span>10</span></div>
                </div>
                
                <div class="buttons-container">
                    <button id="prevBtn" class="btn btn-secondary" style="display: none;">‚Üê –ù–∞–∑–∞–¥</button>
                    <button id="nextBtn" class="btn btn-primary">–î–∞–ª–µ–µ ‚Üí</button>
                </div>
                
                <canvas id="wheelCanvas" width="300" height="300" style="display: none;"></canvas>
            </div>
            
            <div id="completionScreen" class="completion-screen" style="display: none;">
                <div class="completion-message">
                    <div class="completion-icon">‚úÖ</div>
                    <h2>–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!</h2>
                    <p>–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –±–æ—Ç—É...</p>
                    <p>–ß–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</p>
                    <ul>
                        <li>üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞</li>
                        <li>üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</li>
                        <li>üìÑ PDF –æ—Ç—á—ë—Ç —Å –∫–æ–ª–µ—Å–æ–º –∂–∏–∑–Ω–∏</li>
                    </ul>
                    <canvas id="finalWheelCanvas" width="300" height="300"></canvas>
                    <div class="loading-spinner"></div>
                </div>
            </div>
        `;
        
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.progressFill = document.getElementById('progressFill');
        this.progressText = document.getElementById('progressText');
        this.sphereIcon = document.getElementById('sphereIcon');
        this.sphereTitle = document.getElementById('sphereTitle');
        this.questionsContainer = document.getElementById('questionsContainer');
        this.ratingSlider = document.getElementById('ratingSlider');
        this.ratingValue = document.getElementById('ratingValue');
        this.prevBtn = document.getElementById('prevBtn');
        this.nextBtn = document.getElementById('nextBtn');
        this.completionScreen = document.getElementById('completionScreen');
        this.wheelCanvas = document.getElementById('wheelCanvas');
        this.finalWheelCanvas = document.getElementById('finalWheelCanvas');
        
        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.init();
    }
    
    showSphere(index) {
        if (index < 0 || index >= SPHERES_DATA.length) return;
        
        const sphere = SPHERES_DATA[index];
        this.currentSphereIndex = index;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏
        if (this.questionCard) {
            this.questionCard.style.opacity = '0';
            this.questionCard.style.transform = 'translateX(20px)';
        }
        
        setTimeout(() => {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            if (this.sphereIcon) this.sphereIcon.textContent = sphere.icon;
            if (this.sphereTitle) this.sphereTitle.textContent = sphere.title;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
            if (this.questionsContainer) {
                this.questionsContainer.innerHTML = '';
                sphere.questions.forEach(question => {
                    const questionDiv = document.createElement('div');
                    questionDiv.className = 'question-item';
                    questionDiv.textContent = question;
                    this.questionsContainer.appendChild(questionDiv);
                });
            }
            
            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–∞
            const currentScore = this.scores[sphere.key] || 5;
            if (this.ratingSlider) this.ratingSlider.value = currentScore;
            this.updateRatingDisplay(currentScore);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            this.updateProgress();
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            this.updateButtons();
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
            if (this.questionCard) {
                this.questionCard.style.opacity = '1';
                this.questionCard.style.transform = 'translateX(0)';
            }
        }, 200);
    }
    
    updateRatingDisplay(value) {
        if (this.ratingValue) this.ratingValue.textContent = value;
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
        const currentSphere = SPHERES_DATA[this.currentSphereIndex];
        this.scores[currentSphere.key] = parseInt(value);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–µ—Å–∞
        this.updateWheel();
    }
    
    updateProgress() {
        const progress = ((this.currentSphereIndex + 1) / SPHERES_DATA.length) * 100;
        if (this.progressFill) this.progressFill.style.width = `${progress}%`;
        if (this.progressText) this.progressText.textContent = `${this.currentSphereIndex + 1} / ${SPHERES_DATA.length}`;
    }
    
    updateButtons() {
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if (this.prevBtn) {
            if (this.currentSphereIndex === 0) {
                this.prevBtn.style.display = 'none';
            } else {
                this.prevBtn.style.display = 'block';
            }
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ/–ó–∞–≤–µ—Ä—à–∏—Ç—å"
        if (this.nextBtn) {
            if (this.currentSphereIndex === SPHERES_DATA.length - 1) {
                this.nextBtn.textContent = '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç ‚úÖ';
                this.nextBtn.classList.add('btn-success');
            } else {
                this.nextBtn.textContent = '–î–∞–ª–µ–µ ‚Üí';
                this.nextBtn.classList.remove('btn-success');
            }
        }
    }
    
    updateWheel() {
        if (this.wheelCanvas && typeof drawWheel === 'function') {
            drawWheel(this.wheelCanvas, this.scores, SPHERES_DATA);
        }
    }
    
    previousSphere() {
        if (this.currentSphereIndex > 0) {
            this.showSphere(this.currentSphereIndex - 1);
        }
    }
    
    nextSphere() {
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –æ—Ü–µ–Ω–∫–∏
        const currentSphere = SPHERES_DATA[this.currentSphereIndex];
        if (this.ratingSlider) {
            this.scores[currentSphere.key] = parseInt(this.ratingSlider.value);
        }
        
        if (this.currentSphereIndex < SPHERES_DATA.length - 1) {
            // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ñ–µ—Ä–µ
            this.showSphere(this.currentSphereIndex + 1);
        } else {
            // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
            this.completeTest();
        }
    }
    
    completeTest() {
        console.log('Test completed with scores:', this.scores);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ —Å—Ñ–µ—Ä—ã –æ—Ü–µ–Ω–µ–Ω—ã
        const missingScores = SPHERES_DATA.filter(sphere => !this.scores[sphere.key]);
        if (missingScores.length > 0) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤—Å–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏');
            return;
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        this.showCompletionScreen();
        
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Telegram —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            this.sendDataToTelegram();
        }, 3000);
    }
    
    showCompletionScreen() {
        if (this.completionScreen) {
            this.completionScreen.style.display = 'flex';
        }
        
        // –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–µ—Å–æ
        setTimeout(() => {
            if (this.finalWheelCanvas && typeof drawWheel === 'function') {
                drawWheel(this.finalWheelCanvas, this.scores, SPHERES_DATA);
            }
        }, 500);
    }
    
    sendDataToTelegram() {
        if (window.Telegram?.WebApp) {
            try {
                // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                const validatedScores = {};
                SPHERES_DATA.forEach(sphere => {
                    const score = this.scores[sphere.key];
                    validatedScores[sphere.key] = Math.max(1, Math.min(10, parseInt(score) || 5));
                });
                
                console.log('Sending data to Telegram:', validatedScores);
                
                // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram
                window.Telegram.WebApp.sendData(JSON.stringify(validatedScores));
                
                // –ó–∞–∫—Ä—ã—Ç–∏–µ Web App
                setTimeout(() => {
                    window.Telegram.WebApp.close();
                }, 1000);
                
            } catch (error) {
                console.error('Error sending data to Telegram:', error);
                alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            }
        } else {
            console.warn('Telegram WebApp not available');
            // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ Telegram
            alert('–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –î–∞–Ω–Ω—ã–µ: ' + JSON.stringify(this.scores));
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ Telegram
    debugMode() {
        console.log('Debug mode - filling with sample data');
        SPHERES_DATA.forEach((sphere, index) => {
            this.scores[sphere.key] = Math.floor(Math.random() * 10) + 1;
        });
        this.updateWheel();
        this.completeTest();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    const app = new LifeWheelApp();
    
    // –î–æ–±–∞–≤–ª—è–µ–º app –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.lifeWheelApp = app;
    
    // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å app.debugMode() –≤ –∫–æ–Ω—Å–æ–ª–∏
    console.log('Life Wheel App loaded. Use lifeWheelApp.debugMode() for testing.');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã Telegram
document.addEventListener('DOMContentLoaded', () => {
    if (window.Telegram?.WebApp) {
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã Telegram
        const themeParams = window.Telegram.WebApp.themeParams;
        if (themeParams) {
            document.documentElement.style.setProperty('--tg-bg-color', themeParams.bg_color || '#ffffff');
            document.documentElement.style.setProperty('--tg-text-color', themeParams.text_color || '#000000');
            document.documentElement.style.setProperty('--tg-hint-color', themeParams.hint_color || '#708499');
            document.documentElement.style.setProperty('--tg-button-color', themeParams.button_color || '#3390ec');
            document.documentElement.style.setProperty('--tg-button-text-color', themeParams.button_text_color || '#ffffff');
            document.documentElement.style.setProperty('--tg-secondary-bg-color', themeParams.secondary_bg_color || '#f4f4f5');
        }
    }
});

export default LifeWheelApp;

