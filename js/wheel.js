/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
 */
 
class WheelOfLife {
    constructor(canvasId, size = 300) {
        this.canvas = document.getElementById(canvasId);
        this.ctx = this.canvas ? this.canvas.getContext('2d') : null;
        this.size = size;
        this.center = size / 2;
        this.radius = size / 2 - 40;
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ñ–µ—Ä (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–Ω–æ–π)
        this.spheres = {
            'health': { emoji: 'üèÉ‚Äç‚ôÇÔ∏è', title: '–ó–¥–æ—Ä–æ–≤—å–µ', color: '#4CAF50' },
            'career': { emoji: 'üíº', title: '–ö–∞—Ä—å–µ—Ä–∞', color: '#2196F3' },
            'finance': { emoji: 'üí∞', title: '–§–∏–Ω–∞–Ω—Å—ã', color: '#FF9800' },
            'love': { emoji: '‚ù§Ô∏è', title: '–õ—é–±–æ–≤—å', color: '#E91E63' },
            'family': { emoji: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶', title: '–°–µ–º—å—è', color: '#9C27B0' },
            'friends': { emoji: 'üë•', title: '–î—Ä—É–∑—å—è', color: '#00BCD4' },
            'hobby': { emoji: 'üé≠', title: '–•–æ–±–±–∏', color: '#795548' },
            'self': { emoji: 'üìö', title: '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', color: '#607D8B' }
        };

        this.sphereKeys = Object.keys(this.spheres);
        this.numSpheres = this.sphereKeys.length;
        this.angleStep = (2 * Math.PI) / this.numSpheres;

        if (this.canvas) {
            this.setupCanvas();
        }
    }

    setupCanvas() {
        this.canvas.width = this.size;
        this.canvas.height = this.size;
        this.canvas.style.maxWidth = '100%';
        this.canvas.style.height = 'auto';
    }

    // –°–æ–∑–¥–∞—Ç—å SVG –∫–æ–ª–µ—Å–æ (–¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
    createSVGPreview(scores) {
        const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        svg.setAttribute('width', this.size);
        svg.setAttribute('height', this.size);
        svg.setAttribute('viewBox', `0 0 ${this.size} ${this.size}`);

        // –§–æ–Ω
        const background = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
        background.setAttribute('width', this.size);
        background.setAttribute('height', this.size);
        background.setAttribute('fill', 'var(--bg-color)');
        svg.appendChild(background);

        // –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∫—Ä—É–≥–∏ (—à–∫–∞–ª–∞ 1-10)
        for (let i = 1; i <= 10; i++) {
            const circleRadius = (this.radius * i) / 10;
            const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
            circle.setAttribute('cx', this.center);
            circle.setAttribute('cy', this.center);
            circle.setAttribute('r', circleRadius);
            circle.setAttribute('fill', 'none');
            circle.setAttribute('stroke', '#E0E0E0');
            circle.setAttribute('stroke-width', '1');
            svg.appendChild(circle);

            // –ü–æ–¥–ø–∏—Å–∏ —à–∫–∞–ª—ã (—Ç–æ–ª—å–∫–æ —á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞)
            if (i % 2 === 0) {
                const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
                text.setAttribute('x', this.center + circleRadius - 10);
                text.setAttribute('y', this.center - 5);
                text.setAttribute('font-size', '12');
                text.setAttribute('fill', '#666666');
                text.textContent = i.toString();
                svg.appendChild(text);
            }
        }

        // –†–∏—Å—É–µ–º —Å—Ñ–µ—Ä—ã –∏ –∏—Ö –æ—Ü–µ–Ω–∫–∏
        this.sphereKeys.forEach((sphereKey, index) => {
            const sphere = this.spheres[sphereKey];
            const score = scores[sphereKey] || 0;
            const startAngle = index * this.angleStep - Math.PI / 2;
            const endAngle = (index + 1) * this.angleStep - Math.PI / 2;

            // –õ–∏–Ω–∏—è-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            const lineX = this.center + this.radius * Math.cos(startAngle);
            const lineY = this.center + this.radius * Math.sin(startAngle);
            const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
            line.setAttribute('x1', this.center);
            line.setAttribute('y1', this.center);
            line.setAttribute('x2', lineX);
            line.setAttribute('y2', lineY);
            line.setAttribute('stroke', '#CCCCCC');
            line.setAttribute('stroke-width', '1');
            svg.appendChild(line);

            // –°–µ–∫—Ç–æ—Ä —Å –æ—Ü–µ–Ω–∫–æ–π
            if (score > 0) {
                const scoreRadius = (this.radius * score) / 10;
                const path = this.createSectorPath(startAngle, endAngle, scoreRadius);
                const sector = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                sector.setAttribute('d', path);
                sector.setAttribute('fill', sphere.color);
                sector.setAttribute('fill-opacity', '0.6');
                sector.setAttribute('stroke', sphere.color);
                sector.setAttribute('stroke-width', '1');
                svg.appendChild(sector);
            }

            // –ü–æ–¥–ø–∏—Å—å —Å—Ñ–µ—Ä—ã
            const labelAngle = startAngle + this.angleStep / 2;
            const labelRadius = this.radius + 15;
            const labelX = this.center + labelRadius * Math.cos(labelAngle);
            const labelY = this.center + labelRadius * Math.sin(labelAngle);

            // –≠–º–æ–¥–∑–∏
            const emoji = document.createElementNS('http://www.w3.org/2000/svg', 'text');
            emoji.setAttribute('x', labelX);
            emoji.setAttribute('y', labelY);
            emoji.setAttribute('font-size', '16');
            emoji.setAttribute('text-anchor', 'middle');
            emoji.textContent = sphere.emoji;
            svg.appendChild(emoji);

            // –ù–∞–∑–≤–∞–Ω–∏–µ
            const title = document.createElementNS('http://www.w3.org/2000/svg', 'text');
            title.setAttribute('x', labelX);
            title.setAttribute('y', labelY + 15);
            title.setAttribute('font-size', '10');
            title.setAttribute('text-anchor', 'middle');
            title.setAttribute('fill', 'var(--text-color)');
            title.textContent = sphere.title;
            svg.appendChild(title);

            // –û—Ü–µ–Ω–∫–∞
            const scoreText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
            scoreText.setAttribute('x', labelX);
            scoreText.setAttribute('y', labelY + 28);
            scoreText.setAttribute('font-size', '12');
            scoreText.setAttribute('text-anchor', 'middle');
            scoreText.setAttribute('fill', sphere.color);
            scoreText.setAttribute('font-weight', 'bold');
            scoreText.textContent = score.toString();
            svg.appendChild(scoreText);
        });

        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—Ä—É–≥ —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        const totalScore = Object.values(scores).reduce((sum, score) => sum + score, 0);
        const avgScore = totalScore / this.numSpheres;

        const centerCircle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
        centerCircle.setAttribute('cx', this.center);
        centerCircle.setAttribute('cy', this.center);
        centerCircle.setAttribute('r', '25');
        centerCircle.setAttribute('fill', 'var(--bg-color)');
        centerCircle.setAttribute('stroke', 'var(--primary-color)');
        centerCircle.setAttribute('stroke-width', '2');
        svg.appendChild(centerCircle);

        const avgText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        avgText.setAttribute('x', this.center);
        avgText.setAttribute('y', this.center - 3);
        avgText.setAttribute('font-size', '14');
        avgText.setAttribute('text-anchor', 'middle');
        avgText.setAttribute('fill', 'var(--primary-color)');
        avgText.setAttribute('font-weight', 'bold');
        avgText.textContent = avgScore.toFixed(1);
        svg.appendChild(avgText);

        const avgLabel = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        avgLabel.setAttribute('x', this.center);
        avgLabel.setAttribute('y', this.center + 12);
        avgLabel.setAttribute('font-size', '8');
        avgLabel.setAttribute('text-anchor', 'middle');
        avgLabel.setAttribute('fill', 'var(--hint-color)');
        avgLabel.textContent = '—Å—Ä.–±–∞–ª–ª';
        svg.appendChild(avgLabel);

        return svg;
    }

    createSectorPath(startAngle, endAngle, radius) {
        if (radius <= 0) return '';

        const x1 = this.center + radius * Math.cos(startAngle);
        const y1 = this.center + radius * Math.sin(startAngle);
        const x2 = this.center + radius * Math.cos(endAngle);
        const y2 = this.center + radius * Math.sin(endAngle);

        const largeArc = (endAngle - startAngle) > Math.PI ? 1 : 0;

        return `M ${this.center} ${this.center} L ${x1} ${y1} A ${radius} ${radius} 0 ${largeArc} 1 ${x2} ${y2} Z`;
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–æ–∫
    generateRecommendations(scores) {
        const recommendations = {
            'health': [
                '–ù–∞—á–Ω–∏—Ç–µ —Å 15-–º–∏–Ω—É—Ç–Ω–æ–π —É—Ç—Ä–µ–Ω–Ω–µ–π –∑–∞—Ä—è–¥–∫–∏',
                '–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –æ–≤–æ—â–µ–π –≤ —Ä–∞—Ü–∏–æ–Ω',
                '–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–µ–∂–∏–º–æ–º —Å–Ω–∞ (7-8 —á–∞—Å–æ–≤)'
            ],
            'career': [
                '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ 3 –∫–ª—é—á–µ–≤—ã–µ —Ü–µ–ª–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥',
                '–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ',
                '–ù–∞–π–¥–∏—Ç–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –≤ —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏'
            ],
            'finance': [
                '–°–æ–∑–¥–∞–π—Ç–µ –±—é–¥–∂–µ—Ç –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã',
                '–û—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ 10% –æ—Ç –¥–æ—Ö–æ–¥–∞',
                '–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
            ],
            'love': [
                '–£–¥–µ–ª—è–π—Ç–µ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É –æ–±—â–µ–Ω–∏—é',
                '–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
                '–û—Ç–∫—Ä—ã—Ç–æ –≤—ã—Ä–∞–∂–∞–π—Ç–µ —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞'
            ],
            'family': [
                '–û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Å–µ–º–µ–π–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏',
                '–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–µ —Å–µ–º–µ–π–Ω—ã–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏',
                '–ë–æ–ª—å—à–µ —Å–ª—É—à–∞–π—Ç–µ –±–ª–∏–∑–∫–∏—Ö'
            ],
            'friends': [
                '–ò–Ω–∏—Ü–∏–∏—Ä—É–π—Ç–µ –≤—Å—Ç—Ä–µ—á–∏ —Å –¥—Ä—É–∑—å—è–º–∏',
                '–ë—É–¥—å—Ç–µ –±–æ–ª–µ–µ –æ—Ç–∫—Ä—ã—Ç—ã –∫ –Ω–æ–≤—ã–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º',
                '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç'
            ],
            'hobby': [
                '–í—ã–¥–µ–ª–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ª—é–±–∏–º—ã—Ö –∑–∞–Ω—è—Ç–∏–π',
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ',
                '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º'
            ],
            'self': [
                '–ß–∏—Ç–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—é—â—É—é –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É',
                '–ò–∑—É—á–∞–π—Ç–µ –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –æ–Ω–ª–∞–π–Ω',
                '–í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏'
            ]
        };

        // –ù–∞—Ö–æ–¥–∏–º —Å—Ñ–µ—Ä—É —Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π –æ—Ü–µ–Ω–∫–æ–π
        const sortedScores = Object.entries(scores).sort((a, b) => a[1] - b[1]);
        const weakestSphere = sortedScores[0][0];

        return recommendations[weakestSphere] || [
            '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–º —É–ª—É—á—à–µ–Ω–∏–∏',
            '–°—Ç–∞–≤—å—Ç–µ –Ω–µ–±–æ–ª—å—à–∏–µ –¥–æ—Å—Ç–∏–∂–∏–º—ã–µ —Ü–µ–ª–∏',
            '–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å'
        ];
    }

    // –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞
    analyzeBalance(scores) {
        const values = Object.values(scores);
        const total = values.reduce((sum, score) => sum + score, 0);
        const average = total / values.length;
        const maxScore = Math.max(...values);
        const minScore = Math.min(...values);
        const range = maxScore - minScore;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –±–∞–ª–∞–Ω—Å–∞
        let balanceLevel;
        if (range <= 2) {
            balanceLevel = '–û—Ç–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å';
        } else if (range <= 4) {
            balanceLevel = '–•–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å';
        } else if (range <= 6) {
            balanceLevel = '–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å';
        } else {
            balanceLevel = '–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å';
        }

        return {
            total,
            average: parseFloat(average.toFixed(1)),
            maxScore,
            minScore,
            range,
            balanceLevel
        };
    }
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
class ResultsUtils {
    static formatScore(score) {
        return `${score}/10`;
    }

    static getScoreColor(score) {
        if (score >= 8) return '#4CAF50'; // –ó–µ–ª–µ–Ω—ã–π
        if (score >= 6) return '#FF9800'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
        if (score >= 4) return '#FFC107'; // –ñ–µ–ª—Ç—ã–π
        return '#F44336'; // –ö—Ä–∞—Å–Ω—ã–π
    }

    static getScoreLabel(score) {
        if (score >= 9) return '–û—Ç–ª–∏—á–Ω–æ';
        if (score >= 7) return '–•–æ—Ä–æ—à–æ';
        if (score >= 5) return '–°—Ä–µ–¥–Ω–µ';
        if (score >= 3) return '–°–ª–∞–±–æ';
        return '–ö—Ä–∏—Ç–∏—á–Ω–æ';
    }

    static generateSummary(scores) {
        const wheel = new WheelOfLife();
        const analysis = wheel.analyzeBalance(scores);
        const sortedScores = Object.entries(scores).sort((a, b) => b[1] - a[1]);

        return {
            analysis,
            strongest: {
                sphere: sortedScores[0][0],
                score: sortedScores[0][1],
                info: wheel.spheres[sortedScores[0][0]]
            },
            weakest: {
                sphere: sortedScores[sortedScores.length - 1][0],
                score: sortedScores[sortedScores.length - 1][1],
                info: wheel.spheres[sortedScores[sortedScores.length - 1][0]]
            },
            recommendations: wheel.generateRecommendations(scores)
        };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.WheelOfLife = WheelOfLife;
window.ResultsUtils = ResultsUtils;
